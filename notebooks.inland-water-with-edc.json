{"version":1,"kind":"Notebook","sha256":"8503293c1b8bcaa3b4b279023bb2ad3a6cfc977fb450cb297d99448c4f456420","slug":"notebooks.inland-water-with-edc","location":"/notebooks/Inland_water_with_EDC.ipynb","dependencies":[],"frontmatter":{"title":"Exploring Inland Water Bodies with Sentinel-2 data in EDC","content_includes_title":true,"kernelspec":{"name":"conda-env-users-edc-2023.03-02-py","display_name":"users-edc-2023.03-02","language":"python"},"github":"https://github.com/esa-eodashboards/example-viewer/","subject":"Notebook examples","numbering":{"title":{"offset":1}},"edit_url":"https://github.com/esa-eodashboards/example-viewer//blob/main/notebooks/Inland_water_with_EDC.ipynb","exports":[{"format":"ipynb","filename":"Inland_water_with_EDC.ipynb","url":"/eodashboard-notebooks/build/Inland_water_with_ED-e2394522f08552bae51d9de2574a4cc6.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":0.152147,"end_time":"2023-03-22T13:56:08.394372","exception":false,"start_time":"2023-03-22T13:56:08.242225","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from edc import check_compatibility\ncheck_compatibility(\"user-2023.03-02\", dependencies=[\"SH\"])","visibility":"show","key":"f4DmaOWQAb"},{"type":"output","id":"5VQRLPEQAI9zh7V0ub3Td","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"<script type=\"text/javascript\">\n        function toggle(id) {\n            el = document.getElementById(id);\n            el.style.display = el.style.display === \"none\" ? \"block\" : \"none\";\n        }\n    </script>","content_type":"text/html"},"text/plain":{"content":"<IPython.core.display.HTML object>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"This notebook is compatible with this base image version (user-2023.03-02).","content_type":"text/html"},"text/plain":{"content":"<IPython.core.display.HTML object>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"text/markdown":{"content":"\n\n---------\n\nThe following environment variables are available:\n\n* `SH_CLIENT_ID`, `SH_INSTANCE_ID`, `SH_CLIENT_NAME`, `SH_CLIENT_SECRET`\n","content_type":"text/markdown"},"text/plain":{"content":"<IPython.core.display.Markdown object>","content_type":"text/plain"}}}],"visibility":"show","key":"SlOrua2JGo"}],"visibility":"show","key":"RpwLHbMQ3N"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.015196,"end_time":"2023-03-22T13:56:08.425156","exception":false,"start_time":"2023-03-22T13:56:08.409960","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Exploring Inland Water Bodies with Sentinel-2 data in EDC","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gYtnaYZEWz"}],"identifier":"exploring-inland-water-bodies-with-sentinel-2-data-in-edc","label":"Exploring Inland Water Bodies with Sentinel-2 data in EDC","html_id":"exploring-inland-water-bodies-with-sentinel-2-data-in-edc","implicit":true,"key":"aUIfsErVgj"},{"type":"thematicBreak","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"hTZTnGH57v"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"author: Anca Anghelea, based on a ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Bt8zlqRqsO"},{"type":"link","url":"https://eurodatacube.com/notebooks/curated/Exploring_time_and_space_with_EDC.ipynb","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"notebook by: ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"j4IQhaoUgu"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"William Ray","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"BnNHju9bEb"}],"key":"kEsPm9anNN"}],"urlSource":"https://eurodatacube.com/notebooks/curated/Exploring_time_and_space_with_EDC.ipynb","key":"O8KFVWya5V"}],"key":"JE3ZFDPqOi"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Several lakes and other inland water bodies are featured on EO Dashboard. The datasets supporting the various geo-stories are accessible by means similar to what you will learn in this notebook.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"YxSeLfDBRT"}],"key":"l5PNgUYtSj"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://eodashboard.org/oceans","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Explore EO Dashboard Stories on Oceans and Inland Water","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"Ox6glJ20iS"}],"urlSource":"https://eodashboard.org/oceans","key":"uhdmsN4Bql"},{"type":"text","value":".","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"j6B2GsGXye"}],"key":"vw8xeglVjg"},{"type":"heading","depth":2,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"In this notebook","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"dTl1dPHppj"}],"identifier":"in-this-notebook","label":"In this notebook","html_id":"in-this-notebook","implicit":true,"key":"abYgIWUS6D"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"In this demonstration Jupyter Notebook, we will be visualising and analysing inland water bodies using Sentinel data, demonstrating the use of EDC.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"F1sNnNh4wL"}],"key":"ZOAPhhgq8f"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"We are going to use the EDC and its associated libaries and APIs to do this. In this notebook we will learn how to:","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"byV2LCDOU2"}],"key":"Tr3LBCGYhR"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":16,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Build a cube","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"orrHUlBAi0"}],"key":"qFKwL7RC6p"},{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Visualise a variable in your data cube","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"XeUU8gZ1mU"}],"key":"qz8A7tj8iN"},{"type":"listItem","spread":true,"position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"Create a new variable","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"OVizurh0Cm"}],"key":"AoEQkm3wHq"},{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Create a new variable using a threshold","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"Q9e3EZ4PzQ"}],"key":"QH5iWmwtyQ"},{"type":"listItem","spread":true,"position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"Visualise a spatial subset of a variable over time","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"hzlaNKRVO1"}],"key":"BYGTwAilG3"},{"type":"listItem","spread":true,"position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"Create a new variable based upon space and time.","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"G00IBte7VQ"}],"key":"xDwHEKdd14"}],"key":"xkkxb6rbgn"}],"visibility":"show","key":"zx4Pq0924M"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.014038,"end_time":"2023-03-22T13:56:08.453124","exception":false,"start_time":"2023-03-22T13:56:08.439086","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Configuration","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZjkU7A0VFU"}],"identifier":"configuration","label":"Configuration","html_id":"configuration","implicit":true,"key":"YAy9wFuUbU"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Before acccessing the data, we will start by importing the necessary Python libraries (already configured in your EDC workspace), and generate credentials automatically to access the services.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"HKlk0HgLDb"}],"key":"JblnhytY1t"}],"visibility":"show","key":"xhHOwfePeH"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":3.986682,"end_time":"2023-03-22T13:56:12.453656","exception":false,"start_time":"2023-03-22T13:56:08.466974","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# EDC libraries\nfrom edc import setup_environment_variables\nfrom xcube_sh.config import CubeConfig\nfrom xcube_sh.cube import open_cube\nfrom xcube_sh.sentinelhub import SentinelHub\nfrom xcube.core.gen2.local.combiner import CubesCombiner\nfrom xcube.core.geom import mask_dataset_by_geometry\n\n# Sentinel Hub\nfrom sentinelhub import BBox, SentinelHubRequest, bbox_to_dimensions, DataCollection, MimeType, SHConfig, geometry\n\n# Utilities\nimport IPython.display\nfrom os import environ\nimport matplotlib.pyplot as plt\nimport datetime as dt\nimport geopandas\nimport rioxarray\n\n# Numerical computation\nimport xarray as xr\nimport numpy as np\n\n# Fetch credentials as environement variables\nsetup_environment_variables()\n\n# Pass Sentinel Hub credentials to dictionnary\nsh_credentials = dict(client_id=environ[\"SH_CLIENT_ID\"],\n                      client_secret=environ[\"SH_CLIENT_SECRET\"])","visibility":"show","key":"cisjZd4tSa"},{"type":"output","id":"oE0NbVFezJFetw7PSIHUy","data":[{"output_type":"display_data","metadata":{},"data":{"text/markdown":{"content":"API credentials have automatically been injected for your active subscriptions.  \nThe following environment variables are now available:\n\n","content_type":"text/markdown"},"text/plain":{"content":"<IPython.core.display.Markdown object>","content_type":"text/plain"}}}],"visibility":"show","key":"NRduNwoipM"}],"visibility":"show","key":"YWNbucuzDj"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.029571,"end_time":"2023-03-22T13:56:12.507641","exception":false,"start_time":"2023-03-22T13:56:12.478070","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define an AOI","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cJKIxivVNH"}],"key":"SrKzpJZmJS"}],"key":"fzjlMNZB56"}],"key":"bSoDfDEVKt"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Next, we will define our area of interest using a bounding box. This must be provided in WGS84 coordinates to build the cube.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"U8d5aGDR1o"}],"key":"msFoy7Thot"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"We have chosen an AOI covering the natural park “Valli di Comacchio” in Italy.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"jLloovnHjU"}],"key":"zRNm1UefxG"}],"visibility":"show","key":"qlPBAJvf74"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":0.045846,"end_time":"2023-03-22T13:56:12.575410","exception":false,"start_time":"2023-03-22T13:56:12.529564","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Define the coordinates of the bounding box\nlake_bbox = [12.09, 44.54, 12.27, 44.70]\n\n# Bbox EPSG\nbbox_epsg = 4326\n","visibility":"show","key":"YaVrYITVpF"},{"type":"output","id":"gbWgf-wQjIYCCw6aHrN4G","data":[],"visibility":"show","key":"oUPXAGFO9j"}],"visibility":"show","key":"LRN63uEPFw"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":0.066308,"end_time":"2023-03-22T13:56:12.679415","exception":false,"start_time":"2023-03-22T13:56:12.613107","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Plot the bounding box on a map\nIPython.display.GeoJSON(BBox(lake_bbox,crs=bbox_epsg).get_geojson())","visibility":"show","key":"w9MKwwhkdN"},{"type":"output","id":"fZRyhNw43uYeIHGHjFNCc","data":[{"output_type":"display_data","metadata":{"application/geo+json":{"expanded":false,"root":"root"}},"data":{"application/geo+json":{"content":"{\"coordinates\":[[[12.09,44.54],[12.09,44.7],[12.27,44.7],[12.27,44.54],[12.09,44.54]]],\"crs\":{\"properties\":{\"name\":\"urn:ogc:def:crs:EPSG::4326\"},\"type\":\"name\"},\"type\":\"Polygon\"}","content_type":"application/geo+json"},"text/plain":{"content":"<IPython.display.GeoJSON object>","content_type":"text/plain"}}}],"visibility":"show","key":"furRcOTYpH"}],"visibility":"show","key":"KUbvN7RyAj"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.017479,"end_time":"2023-03-22T13:56:12.720964","exception":false,"start_time":"2023-03-22T13:56:12.703485","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"How to build a data cube","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xzqWDBsUOn"}],"identifier":"how-to-build-a-data-cube","label":"How to build a data cube","html_id":"how-to-build-a-data-cube","implicit":true,"key":"tyalu1kMZ4"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Firstly, we will go through how to build a data cube.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"DO2EyQjQDt"}],"key":"hzDvN9PJLF"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"We are going to visualise the floods using Sentinel-2 imagery. Sentinel-2 is part of the Copernicus programme and collects multispectral data globally with a revisit time of 5 days. The satellite’s multispectral imager provides collects data in 13 spectral bands spanning from the visible and near infrared to the shortwave infrared. The visible and near infrared data we will use in this example is collected at 10m resolution.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"EDJf2UDfQn"}],"key":"rP4IoShmr9"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"strong","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Check Sentinel-2 L2A available bands","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"s5gc0folJv"}],"key":"pnnZPq3i0s"}],"key":"c5HnicKWLT"}],"key":"cCS3mmsqkN"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Using EDC inbuilt functions that query Sentinel Hub services, we can easily list the available bands for a given dataset to help us build the cube!","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"PwRB93HjVD"}],"key":"ZW6crzxt0Y"}],"visibility":"show","key":"KeZji0GhRj"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":0.185602,"end_time":"2023-03-22T13:56:12.938730","exception":false,"start_time":"2023-03-22T13:56:12.753128","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Create a Sentinel Hub class, using our Sentinel Hub credentials\nSH = SentinelHub(**sh_credentials)\n\n# List bands for S2-L2A\nSH.band_names('S2L2A')","visibility":"show","key":"nWFsZFv0nd"},{"type":"output","id":"2PG1WZPKZ0XE6fLYvCp-M","data":[{"output_type":"execute_result","execution_count":5,"metadata":{},"data":{"text/plain":{"content":"['B01',\n 'B02',\n 'B03',\n 'B04',\n 'B05',\n 'B06',\n 'B07',\n 'B08',\n 'B8A',\n 'B09',\n 'B11',\n 'B12',\n 'SCL',\n 'SNW',\n 'CLD',\n 'viewZenithMean',\n 'viewAzimuthMean',\n 'sunZenithAngles',\n 'sunAzimuthAngles',\n 'AOT',\n 'CLM',\n 'CLP']","content_type":"text/plain"}}}],"visibility":"show","key":"Yu0JSXpQCE"}],"visibility":"show","key":"mXDqNbUXB8"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.014551,"end_time":"2023-03-22T13:56:12.970059","exception":false,"start_time":"2023-03-22T13:56:12.955508","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Build an xcube","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VxHS4TisgP"}],"key":"hCj1riBtjJ"}],"key":"K1o152TSkX"}],"key":"SMGnyF6Wxy"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In the following cell we will specify the input parameters needed to build an xcube array. The following parameters are specified:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"cBDUpuQAgl"}],"key":"kPSfHISmn8"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"dataset_name","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"q6iGnuaft2"}],"key":"ZAlaAgZoGt"},{"type":"text","value":": the Sentinel Hub identification of the dataset. Here we will call ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"UuNHKaO7NM"},{"type":"inlineCode","value":"S2L2A","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"FYB94AqXbd"},{"type":"text","value":" for Sentinel-2 L2A. All available datasets can be listed with ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"qKgPFaHgHX"},{"type":"inlineCode","value":"SH.dataset_names","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"aTUTYk2hti"}],"key":"F2ldhTJJW1"}],"key":"M28uombK0p"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"band_names","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"dAgAST2lTI"}],"key":"Qe0VMkr68E"},{"type":"text","value":": the band names to be used in the xcube array (see previous code cell). Here, we will call the B02, B03, B04, B08, CLM (Blue, Green, Red, NIR, Cloud Mask) bands.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ct8wdegZfB"}],"key":"HWbf4RasZr"}],"key":"Ck1ZG7bi3b"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"bbox","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"IdxHXDzhrq"}],"key":"BRlG7ku7QV"},{"type":"text","value":": the bounding box that sets the extent of the AOI. Because we are using the default WGS84 coordinate system here, the CRS parameter doesn’t need to be set.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"GYYkyGY8jP"}],"key":"SF0Ng2NZfY"}],"key":"QiYm5ytC4X"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"spatial_res","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"YxzcVB6v8o"}],"key":"DuFahqEAw2"},{"type":"text","value":": the spatial resolution of the rasters contained in the xcube array. The spatial resolution is expressed in the units of the coordinate system used. Therefore, in this example, the spatial resolution is set in degrees. For an approximate pixel size of 10 meters, we set the resolution to 0.000089 degrees.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"L42NOT2sUO"}],"key":"YNjNYFnVr1"}],"key":"FsDxxbxPSn"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"time_range","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"EduU8RhYM8"}],"key":"GPLgwmQb8U"},{"type":"text","value":": a list of two dates [start_date, end_date] forming a time period for which all acquisitions will be returned. Sentinel-2 L2A data is available from October 2016 onwards. In this example, we will fetch data for June 2023 - mid July 2023.","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"wXva23PaOZ"}],"key":"vJ1vNLwg5O"}],"key":"fjcHizCBQS"},{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"time_tolerance","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"K2Gi78ajTx"}],"key":"sRfT5wZ1EG"},{"type":"text","value":": The tolerance used to identify whether a dataset should still be included within a time period. Here, ","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"PkiCwmj86u"},{"type":"inlineCode","value":"30m","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"rs74fJxIpk"},{"type":"text","value":" corresponds to 30 minutes, thus avoiding duplicate datasets.","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"yBpYTFuhNg"}],"key":"uTZir1DRlh"}],"key":"hGjZYkGsYP"}],"key":"yvblA8bZnB"}],"visibility":"show","key":"Raaq62cud2"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":0.05642,"end_time":"2023-03-22T13:56:13.043290","exception":false,"start_time":"2023-03-22T13:56:12.986870","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Setup xcube\ns2_cube_config = CubeConfig(dataset_name='S2L2A',\n                         band_names=['B02', 'B03', 'B04', 'B08', 'CLM'],\n                         bbox=lake_bbox,\n                         spatial_res=0.000089,\n                         time_range=['2023-06-01', '2023-07-16'],\n                         time_tolerance='30m')","visibility":"show","key":"evHxxtNKak"},{"type":"output","id":"UuUUKZtcwnEPiUwlCT-nR","data":[],"visibility":"show","key":"hfEF2bCdU5"}],"visibility":"show","key":"hAYEXowMm4"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.019507,"end_time":"2023-03-22T13:56:13.085157","exception":false,"start_time":"2023-03-22T13:56:13.065650","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Open the xcube","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vrTAS5mhau"}],"key":"SVympXJs7X"}],"key":"e2jpoviAVO"}],"key":"ZiAGiKMnvJ"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In the following cell we open the cube and display its contents. The automatically generated credentials obtained earlier in this Jupyter Notebook are specified as a parameter when opening the cube. It’s important to note that at this stage, we’re not processing anything, just generating a cube on the fly with data ready to be called when needed for analysis.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"oARfB6L73V"}],"key":"O4Jb1Yem8Q"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Once you open the cube, you can visualise the contents. You can view the number of timestamps and a list of them all too in the Coordinates tab. You can also visualise the seperate variables, with information on the size of the variables and their data type too.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"YMHGuQ7mTZ"}],"key":"ZXHnYRnDyT"}],"visibility":"show","key":"vtXgbY8tPu"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":0.342001,"end_time":"2023-03-22T13:56:13.447544","exception":false,"start_time":"2023-03-22T13:56:13.105543","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Open cube (on the fly)\ns2_cube = open_cube(s2_cube_config, **sh_credentials)\n\n# Display contents\ns2_cube","visibility":"show","key":"Hoj45jM2bQ"},{"type":"output","id":"KetrckBFM71qUDNf9XvK2","data":[{"name":"stderr","output_type":"stream","text":"/home/conda/users/52c397debe78d7686aa36bd394f6f113e95009637029c5b71995fe48a567dcd4-20230418-061740-771350-145-edc-2023.03-02/lib/python3.9/site-packages/xcube_sh/sentinelhub.py:243: UserWarning: The argument 'infer_datetime_format' is deprecated and will be removed in a future version. A strict version of it is now the default, see https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. You can safely remove this argument.\n  dt = pd.to_datetime(dt,\n/home/conda/users/52c397debe78d7686aa36bd394f6f113e95009637029c5b71995fe48a567dcd4-20230418-061740-771350-145-edc-2023.03-02/lib/python3.9/site-packages/xcube_sh/sentinelhub.py:243: UserWarning: The argument 'infer_datetime_format' is deprecated and will be removed in a future version. A strict version of it is now the default, see https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. You can safely remove this argument.\n  dt = pd.to_datetime(dt,\n"},{"output_type":"execute_result","execution_count":7,"metadata":{},"data":{"text/html":{"content_type":"text/html","hash":"12b8bd2fae3a1febcf57a9731234b9ff","path":"/eodashboard-notebooks/build/12b8bd2fae3a1febcf57a9731234b9ff.html"},"text/plain":{"content":"<xarray.Dataset>\nDimensions:    (time: 18, lat: 1886, lon: 2122, bnds: 2)\nCoordinates:\n  * lat        (lat) float64 44.71 44.71 44.71 44.71 ... 44.54 44.54 44.54 44.54\n  * lon        (lon) float64 12.09 12.09 12.09 12.09 ... 12.28 12.28 12.28 12.28\n  * time       (time) datetime64[ns] 2023-06-02T10:18:28 ... 2023-07-14T10:08:32\n    time_bnds  (time, bnds) datetime64[ns] dask.array<chunksize=(18, 2), meta=np.ndarray>\nDimensions without coordinates: bnds\nData variables:\n    B02        (time, lat, lon) float32 dask.array<chunksize=(1, 943, 1061), meta=np.ndarray>\n    B03        (time, lat, lon) float32 dask.array<chunksize=(1, 943, 1061), meta=np.ndarray>\n    B04        (time, lat, lon) float32 dask.array<chunksize=(1, 943, 1061), meta=np.ndarray>\n    B08        (time, lat, lon) float32 dask.array<chunksize=(1, 943, 1061), meta=np.ndarray>\n    CLM        (time, lat, lon) float32 dask.array<chunksize=(1, 943, 1061), meta=np.ndarray>\nAttributes:\n    Conventions:             CF-1.7\n    title:                   S2L2A Data Cube Subset\n    history:                 [{'program': 'xcube_sh.chunkstore.SentinelHubChu...\n    date_created:            2023-07-16T01:24:44.851881\n    time_coverage_start:     2023-06-02T10:18:28+00:00\n    time_coverage_end:       2023-07-14T10:08:32+00:00\n    time_coverage_duration:  P41DT23H50M4S\n    geospatial_lon_min:      12.09\n    geospatial_lat_min:      44.54\n    geospatial_lon_max:      12.278858\n    geospatial_lat_max:      44.707854\n    processing_level:        L2A","content_type":"text/plain"}}}],"visibility":"show","key":"ErKeUdZv11"}],"visibility":"show","key":"GNzPBvpLrT"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.022112,"end_time":"2023-03-22T13:56:13.490032","exception":false,"start_time":"2023-03-22T13:56:13.467920","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"How to visualise your datacube","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Y9Gl6e8w7R"}],"identifier":"how-to-visualise-your-datacube","label":"How to visualise your datacube","html_id":"how-to-visualise-your-datacube","implicit":true,"key":"CYIQwftQfA"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now we have built our cube, let’s visualise the data! We are going to visualise a True Color image and an NDWI image in the same plot. In the below cell you can see we are selecting each band for 10:00:00 16th June 2023, and selecting the nearest acquisition to this date and time. We then stack the three bands and plot this using Matplotlib. We will call the three bands in the visible spectrum. In addition we will multiply the reflectance values by 5 to brighten the image.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"shvDZesVl6"}],"key":"NFBxFReb4e"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Another way to visualise the extent of surface water is to use the Normalised Difference Water Index (NDWI). This is an index that can be used to extract surface water using multispectral imagery such as Sentinel-2. We can calculate the index with the Green and NIR bands as stated below, and add it into the data cube as a new variable.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"fkdnhbnzCB"}],"key":"JVGkkmV9Ud"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"NDWI = Green - NIR / Green + NIR","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"W9N4nAit63"}],"key":"SsFxjI96mp"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"For this we are going to create a new variable in the next cell. To create the new variable we are using two existing variables defined as s2_cube.B03 and s2_cube.B08. We then insert these variables into an index formula to create NDWI. Once ndwi has been calculated it’s attributed a long_name and units before being defined as ndwi so that we can call it as a definition later in the notebook.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"d4tS4xyjui"}],"key":"bJpbuP385W"}],"visibility":"show","key":"uFsY7WvxLN"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":0.084804,"end_time":"2023-03-22T13:56:13.599932","exception":false,"start_time":"2023-03-22T13:56:13.515128","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Define NDWI in visualisation\nndwi = ((s2_cube.B03-s2_cube.B08)/(s2_cube.B03+s2_cube.B08))\n\nndwi.attrs['long_name']='NDWI'\nndwi.attrs['units']='unitless'\n\ns2_cube['NDWI']= ndwi  ","visibility":"show","key":"CbP5JyWg5T"},{"type":"output","id":"D-ErVNiGxiDbpoALyzbFp","data":[],"visibility":"show","key":"Eq0N88RGEv"}],"visibility":"show","key":"QtjyGlNkRH"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.018047,"end_time":"2023-03-22T13:56:13.637906","exception":false,"start_time":"2023-03-22T13:56:13.619859","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Next we want to plot both the True Color image and the NDWI in the same plot. We will use Matplotlib to achieve this.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RajMt2xXcW"}],"key":"BdPzXykMex"}],"visibility":"show","key":"gy3A8rC3zP"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":5.878177,"end_time":"2023-03-22T13:56:19.535578","exception":false,"start_time":"2023-03-22T13:56:13.657401","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Select the bands and stack them.\nRed = s2_cube.B04.sel(time='2023-06-17 10:00:00', method='nearest')\nGreen = s2_cube.B03.sel(time='2023-06-17 10:00:00', method='nearest')\nBlue = s2_cube.B02.sel(time='2023-06-17 10:00:00', method='nearest')\n\nrgb = np.dstack((Red,Green,Blue)) #Stack the three arrays\n\nndwi = s2_cube.NDWI.sel(time='2023-06-17 10:00:00', method='nearest')\n\n# Plot \nf = plt.figure(figsize=[10, 15])\nf.add_subplot(1, 2, 1)\nplt.title(f\"True Color: {str(s2_cube.time.sel(time='2023-06-17 10:00:00', method='nearest').data).split('T')[0]}\")\nplt.imshow(5 * rgb)  # We multiply the rgb by 5 to make the image brighter\nf.add_subplot(1, 2, 2)\nplt.title(f\"NDWI: {str(s2_cube.time.sel(time='2023-06-17 10:00:00', method='nearest').data).split('T')[0]}\")\nplt.imshow(ndwi, vmin=-1, vmax=1, cmap='GnBu')\nplt.show()","visibility":"show","key":"TNAtC176Ew"},{"type":"output","id":"1gh4-iWE5k0uSf9xCrTbs","data":[{"name":"stderr","output_type":"stream","text":"Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"d3fe936ff0d0842811956588c8000d8c","path":"/eodashboard-notebooks/build/d3fe936ff0d0842811956588c8000d8c.png"},"text/plain":{"content":"<Figure size 1000x1500 with 2 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"ZrLamvS8V1"}],"visibility":"show","key":"Mv9RpThYhJ"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.060035,"end_time":"2023-03-22T13:56:19.643957","exception":false,"start_time":"2023-03-22T13:56:19.583922","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This looks good, and the extent of the flood waters is visualised really nicely here. The 10m resolution also enables us to see individual fields around the lake with the linear boundaries of the fields highlighted nicely in the high resolution image provided by the 10m Sentinel 2 bands.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"slmoRlLUHT"}],"key":"hL7POczCU8"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Let’s try and visualise some more dates in the time period that we are examining;","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"BzRcgbjsLp"}],"key":"Ndsr8gAT2H"}],"visibility":"show","key":"YtxhZdKPmF"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":14.299041,"end_time":"2023-03-22T13:56:33.983607","exception":false,"start_time":"2023-03-22T13:56:19.684566","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Select timestamps\nndwi1 = s2_cube.NDWI.sel(time='2023-06-17 10:00:00', method='nearest')\nndwi2 = s2_cube.NDWI.sel(time='2023-06-24 10:00:00', method='nearest')\nndwi3 = s2_cube.NDWI.sel(time='2023-06-29 10:00:00', method='nearest')\nndwi4 = s2_cube.NDWI.sel(time='2023-07-04 10:00:00', method='nearest')\nndwi5 = s2_cube.NDWI.sel(time='2023-07-07 10:00:00', method='nearest')\nndwi6 = s2_cube.NDWI.sel(time='2023-07-09 10:00:00', method='nearest')\n\n\n# Plot \nf = plt.figure(figsize=[15,11])\nax1 = f.add_subplot(2,3, 1)\nax2 = f.add_subplot(2,3, 2)\nax3 = f.add_subplot(2,3, 3)\nax4 = f.add_subplot(2,3, 4)\nax5 = f.add_subplot(2,3, 5)\nax6 = f.add_subplot(2,3, 6)\n\naxlist=[ax1,ax2,ax3,ax4,ax5,ax6]\n\nt = ndwi1.plot.imshow(ax=ax1, vmin=-1, vmax=1, cmap='GnBu', add_colorbar=False)\nndwi2.plot.imshow(ax=ax2, vmin=-1, vmax=1, cmap='GnBu', add_colorbar=False)\nndwi3.plot.imshow(ax=ax3, vmin=-1, vmax=1, cmap='GnBu', add_colorbar=False)\nndwi4.plot.imshow(ax=ax4, vmin=-1, vmax=1, cmap='GnBu', add_colorbar=False)\nndwi5.plot.imshow(ax=ax5, vmin=-1, vmax=1, cmap='GnBu', add_colorbar=False)\nndwi6.plot.imshow(ax=ax6, vmin=-1, vmax=1, cmap='GnBu', add_colorbar=False)\n\ncbar_ax = f.add_axes([1, 0.15, 0.05, 0.7])\nf.colorbar(t, cax=cbar_ax, label=\"NDWI\")\n\n#we will save the output image so we need to ensure that it is fully rendered \nplt.tight_layout() \n\n# Save the figure to a PNG file\nplt.savefig('NDWI.png')\n\nplt.show()","visibility":"show","key":"tDUcHOdefl"},{"type":"output","id":"Gwuzb5xZm_0J4ZUmnBivh","data":[{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_490/1879529373.py:32: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n  plt.tight_layout()\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"0dd7120e34ba2c354c60a1df441b3692","path":"/eodashboard-notebooks/build/0dd7120e34ba2c354c60a1df441b3692.png"},"text/plain":{"content":"<Figure size 1500x1100 with 7 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"pEHdtRo6o4"}],"visibility":"show","key":"lRS4GxJ7lV"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.049805,"end_time":"2023-03-22T13:56:34.083722","exception":false,"start_time":"2023-03-22T13:56:34.033917","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We could use the NDWI to estimate the surface water extent. The more images we have available, the more reliable the estimate can be. Examining the satellite images above we observe that not all of the images would be useful, as some of the lake area is covered with clouds. To overcome this limitation and have a denser time series we could rely on synthetic aperture radar observations, for example from the Copernicus Sentinel-1 platform.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CtyoIrRJ8d"}],"key":"f1nuUwe4KP"}],"visibility":"show","key":"f3PCaLjgGv"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.044953,"end_time":"2023-03-22T13:56:34.173811","exception":false,"start_time":"2023-03-22T13:56:34.128858","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Sentinel-1 description","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Hwtd5MQQSy"}],"identifier":"sentinel-1-description","label":"Sentinel-1 description","html_id":"sentinel-1-description","implicit":true,"key":"HDeRbyuZ2M"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Like Sentinel-2, Sentinel-1 is also part of the Copernicus programme and collects data globally with a revisit time of 5 days. In contrast to Sentinel-2, Sentinel-1 SAR is an active sensor using SAR signals recording the backscatter. Due to the wavelengths used, SAR is not hindered by clouds and can be operated day and night.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"crZt79Tz3V"}],"key":"qXWLJlXc6y"}],"visibility":"show","key":"gyyMo0wzmi"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.053337,"end_time":"2023-03-22T13:56:34.278035","exception":false,"start_time":"2023-03-22T13:56:34.224698","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Check Sentinel-1 GRD available bands","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"n2kts2Cg2s"}],"identifier":"check-sentinel-1-grd-available-bands","label":"Check Sentinel-1 GRD available bands","html_id":"check-sentinel-1-grd-available-bands","implicit":true,"key":"smvpL70dz8"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Using EDC inbuilt functions that query Sentinel Hub services, we can easily list the available bands for a given dataset.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ixUPXQYYzB"}],"key":"JpjmmPC5dq"}],"visibility":"show","key":"ApbE3O4odA"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":0.083951,"end_time":"2023-03-22T13:56:34.415888","exception":false,"start_time":"2023-03-22T13:56:34.331937","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# List bands for S1-GRD\nSH.band_names('S1GRD')","visibility":"show","key":"X3RCgRFX5v"},{"type":"output","id":"WB74ikFkfMPkbOJMt7Vdo","data":[{"output_type":"execute_result","execution_count":11,"metadata":{},"data":{"text/plain":{"content":"['VV', 'HH', 'VH', 'localIncidenceAngle', 'scatteringArea', 'shadowMask', 'HV']","content_type":"text/plain"}}}],"visibility":"show","key":"KgPDrfmKV0"}],"visibility":"show","key":"youkdHOwSe"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.036057,"end_time":"2023-03-22T13:56:34.492397","exception":false,"start_time":"2023-03-22T13:56:34.456340","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Build an xcube","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"e9zSkF2G6Q"}],"identifier":"build-an-xcube","label":"Build an xcube","html_id":"build-an-xcube","implicit":true,"key":"FkdRPuvJMs"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In the following cell we will specify the input parameters needed to build an xcube array. The following parameters are specified:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XT7kekUyBD"}],"key":"H0Nfr5Hnty"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"dataset_name","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"mQ6r55ZxqC"}],"key":"F9yxdiyEmz"},{"type":"text","value":": the Sentinel Hub identification of the dataset. Here we will call ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"nbybooZSgp"},{"type":"inlineCode","value":"S1GRD","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"CAx8xOpEia"},{"type":"text","value":" for Sentinel-1 GRD. All available datasets can be listed with ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"w2LBNX9ozx"},{"type":"inlineCode","value":"SH.dataset_names","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"jWsyfOEhiH"}],"key":"TwqxWjt4ml"}],"key":"c8azJkoGyM"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"band_names","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"wqgsCgfL6n"}],"key":"MD6uwRPnvi"},{"type":"text","value":": the band names to be used in the xcube array (see previous code cell). Here, we will call just the VV polarisation band.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"fzLI9nhIqV"}],"key":"rlecNnsQLv"}],"key":"jNhRuDqMCd"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"bbox","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"fUmrh03Zvt"}],"key":"JI47xKWG9r"},{"type":"text","value":": the bounding box that sets the extent of the AOI. Because we are using the default WGS84 coordinate system here, the CRS parameter doesn’t need to be set.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"xv5RyTb397"}],"key":"IPKfjEI8kl"}],"key":"CjQmRjOcp2"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"spatial_res","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"jJc2Rghz41"}],"key":"OArtTxXmIL"},{"type":"text","value":": the spatial resolution of the rasters contained in the xcube array. The spatial resolution is expressed in the units of the coordinate system used. Therefore, in this example, the spatial resolution is set in degrees. For an approximate pixel size of 10 meters, we set the resolution to 0.000089 degrees.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"ST1WSkkDfb"}],"key":"AcKNgYs7Hj"}],"key":"AS3T6GsiNr"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"time_range","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"DR5p0yB8sk"}],"key":"wjHUttdUme"},{"type":"text","value":": a list of two dates [start_date, end_date] forming a time period for which all acquisitions will be returned. Sentinel-1 GRD data is available from February 2015 onwards. In this example, we will fetch data for June 2023 - mid July 2023.","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"ZuyETKLwCG"}],"key":"sQpsP5R2wR"}],"key":"EtJbkHAfUY"},{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"time_tolerance","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"k6MjbNnO65"}],"key":"iBUOMj9QaT"},{"type":"text","value":": The tolerance used to identify whether a dataset should still be included within a time period. Here, ","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"KBvnYcwGPr"},{"type":"inlineCode","value":"30m","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"cXYgpxUrRs"},{"type":"text","value":" corresponds to 30 minutes, thus avoiding duplicate datasets.","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"FaOEEEBszz"}],"key":"iP3h4vqW1S"}],"key":"pCoSWFgc4R"}],"key":"kJJLo6Jc1G"}],"visibility":"show","key":"Naqv6ivK9u"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":0.093586,"end_time":"2023-03-22T13:56:34.624470","exception":false,"start_time":"2023-03-22T13:56:34.530884","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Setup xcube\ns1_cube_config = CubeConfig(dataset_name='S1GRD',\n                         band_names=['VV'],\n                         bbox=lake_bbox,\n                         spatial_res=0.000089,\n                         time_range=['2023-06-01', '2023-07-16'],\n                         time_tolerance='30m')","visibility":"show","key":"I7sK0HL52v"},{"type":"output","id":"DmKLA4FFOV0Lr5HXyYblK","data":[],"visibility":"show","key":"RDP9cpTv6f"}],"visibility":"show","key":"HSNG8W0qX3"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.062318,"end_time":"2023-03-22T13:56:34.792948","exception":false,"start_time":"2023-03-22T13:56:34.730630","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Open the xcube","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DKee5BZNMO"}],"identifier":"open-the-xcube","label":"Open the xcube","html_id":"open-the-xcube","implicit":true,"key":"W45avaE1Vu"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In the following cell we open the cube and display its contents. The automatically generated credentials obtained earlier in this Jupyter Notebook are specified as a parameter when opening the cube.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"bfvWASFNhE"}],"key":"mVJEFKFIpY"}],"visibility":"show","key":"YvsixP5pkQ"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":0.482689,"end_time":"2023-03-22T13:56:35.333780","exception":false,"start_time":"2023-03-22T13:56:34.851091","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Open cube (on the fly)\ns1_cube = open_cube(s1_cube_config, **sh_credentials)\n\n# Display contents\ns1_cube","visibility":"show","key":"U0t10OKSGi"},{"type":"output","id":"E1nt2NjfzBXtqzVWzPr3Y","data":[{"name":"stderr","output_type":"stream","text":"/home/conda/users/52c397debe78d7686aa36bd394f6f113e95009637029c5b71995fe48a567dcd4-20230418-061740-771350-145-edc-2023.03-02/lib/python3.9/site-packages/xcube_sh/sentinelhub.py:243: UserWarning: The argument 'infer_datetime_format' is deprecated and will be removed in a future version. A strict version of it is now the default, see https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. You can safely remove this argument.\n  dt = pd.to_datetime(dt,\n/home/conda/users/52c397debe78d7686aa36bd394f6f113e95009637029c5b71995fe48a567dcd4-20230418-061740-771350-145-edc-2023.03-02/lib/python3.9/site-packages/xcube_sh/sentinelhub.py:243: UserWarning: The argument 'infer_datetime_format' is deprecated and will be removed in a future version. A strict version of it is now the default, see https://pandas.pydata.org/pdeps/0004-consistent-to-datetime-parsing.html. You can safely remove this argument.\n  dt = pd.to_datetime(dt,\n"},{"output_type":"execute_result","execution_count":13,"metadata":{},"data":{"text/html":{"content_type":"text/html","hash":"8ba8d77c5701aff0f7d737e348cb777a","path":"/eodashboard-notebooks/build/8ba8d77c5701aff0f7d737e348cb777a.html"},"text/plain":{"content":"<xarray.Dataset>\nDimensions:    (time: 11, lat: 1886, lon: 2122, bnds: 2)\nCoordinates:\n  * lat        (lat) float64 44.71 44.71 44.71 44.71 ... 44.54 44.54 44.54 44.54\n  * lon        (lon) float64 12.09 12.09 12.09 12.09 ... 12.28 12.28 12.28 12.28\n  * time       (time) datetime64[ns] 2023-06-03T05:19:46 ... 2023-07-10T17:06:57\n    time_bnds  (time, bnds) datetime64[ns] dask.array<chunksize=(11, 2), meta=np.ndarray>\nDimensions without coordinates: bnds\nData variables:\n    VV         (time, lat, lon) float32 dask.array<chunksize=(1, 943, 1061), meta=np.ndarray>\nAttributes:\n    Conventions:             CF-1.7\n    title:                   S1GRD Data Cube Subset\n    history:                 [{'program': 'xcube_sh.chunkstore.SentinelHubChu...\n    date_created:            2023-07-16T01:25:41.443109\n    time_coverage_start:     2023-06-03T05:19:46+00:00\n    time_coverage_end:       2023-07-10T17:06:57+00:00\n    time_coverage_duration:  P37DT11H47M11S\n    geospatial_lon_min:      12.09\n    geospatial_lat_min:      44.54\n    geospatial_lon_max:      12.278858\n    geospatial_lat_max:      44.707854\n    processing_level:        L1B","content_type":"text/plain"}}}],"visibility":"show","key":"knb3FBKs2Y"}],"visibility":"show","key":"IMfiicT6kH"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.06691,"end_time":"2023-03-22T13:56:35.448035","exception":false,"start_time":"2023-03-22T13:56:35.381125","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Visualising the water areas using SAR","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"us4NPfW6Tj"}],"identifier":"visualising-the-water-areas-using-sar","label":"Visualising the water areas using SAR","html_id":"visualising-the-water-areas-using-sar","implicit":true,"key":"eIGYntMUBc"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We are going to use the VV band to visualise the flooding. From our earlier visualisation, we know that the area had some cloud coverage around the date 2023-07-04. We will search for Sentinel-1 acquisitions around that date in order to obtain a denser time series.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Fj9lzSxPqv"}],"key":"ZgqHwaUK30"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Radar data has very large dynamic range a very imbalanced histogram (>95% of all values are smaller than 1, but the remaining 5 % can be impractically large). Thus, to obtain a visualisation with a better contrast in which the water bodies would be darker and the land pixels would be brighter, it is recommended to convert the data to log-scale.\nTo convert the pixel values from Digital Number to decibels we can mutiply the log10 of each DN pixel by 10. Secondly, as there will be pixels with a value of -inf after this operation, we need to account for this with the second function which will automatically assign 0 to these pixels.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"IauN326oNU"}],"key":"oaAWhEr5kE"}],"visibility":"show","key":"nf1OHFBi2R"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":0.091149,"end_time":"2023-03-22T13:56:35.585478","exception":false,"start_time":"2023-03-22T13:56:35.494329","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Convert VV Digital numbers to Decibels\nvv_dn = s1_cube.VV\nvv_db = 10 * (np.log10(vv_dn))\n\nvv_db = vv_db.where(np.isfinite(vv_db), 0)\n\nvv_db.attrs['long_name']='VV_dB'\nvv_db.attrs['units']='decibels'\n\ns1_cube['VV_dB']= vv_db","visibility":"show","key":"ufg6PzYj8y"},{"type":"output","id":"Qnd7fWmDJYpuk7y0u9Duk","data":[],"visibility":"show","key":"ABmS7QX4sd"}],"visibility":"show","key":"oKaKz24m5b"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.041988,"end_time":"2023-03-22T13:56:35.674910","exception":false,"start_time":"2023-03-22T13:56:35.632922","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Like previously, we are going to visualise the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TqWaxmWKlQ"},{"type":"inlineCode","value":"VV_dB","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NS6F1Px7bp"},{"type":"text","value":" variable we have just generated for our AOI.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"D0jWM4lK6Q"}],"key":"Ku2OgTkT8U"}],"visibility":"show","key":"mRuJpzuygP"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":2.356128,"end_time":"2023-03-22T13:56:38.087889","exception":false,"start_time":"2023-03-22T13:56:35.731761","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# select and define the timestamp you want to visualise \nVV_dB_timestamp = s1_cube.VV_dB.sel(time='2023-07-09 10:00:00', method='nearest')\n\n# plot the timestamp\nVV_dB_timestamp.plot.imshow(vmin=-40, vmax=0, cmap='winter', figsize=(10, 10))\n\n# save and display the plot\nplt.show()","visibility":"show","key":"s1yrmYE25u"},{"type":"output","id":"48y65fTEmmhV40tv2i6Z-","data":[{"name":"stderr","output_type":"stream","text":"/home/conda/users/52c397debe78d7686aa36bd394f6f113e95009637029c5b71995fe48a567dcd4-20230418-061740-771350-145-edc-2023.03-02/lib/python3.9/site-packages/dask/core.py:119: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"f4cdc99be519c6d889f687b1af7ad347","path":"/eodashboard-notebooks/build/f4cdc99be519c6d889f687b1af7ad347.png"},"text/plain":{"content":"<Figure size 1000x1000 with 2 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"URb1jQLeuI"}],"visibility":"show","key":"MCg3QIdzyd"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.057616,"end_time":"2023-03-22T13:56:38.210574","exception":false,"start_time":"2023-03-22T13:56:38.152958","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This looks very similar to the NDWI we derived earlier showing the water extent fairly clearly (the blue areas). Let’s visualise it over several timestamps to confirm that this is a good variable to use to generate a lake mask.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"achFRcFkb8"}],"key":"pVHWbn0ZPZ"}],"visibility":"show","key":"vRV9IdHQAR"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":10.261827,"end_time":"2023-03-22T13:56:48.534644","exception":false,"start_time":"2023-03-22T13:56:38.272817","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"#### Timestamp selection\nvv1 = s1_cube.VV_dB.sel(time='2023-06-03 10:00:00', method='nearest')\nvv2 = s1_cube.VV_dB.sel(time='2023-06-04 10:00:00', method='nearest')\nvv3 = s1_cube.VV_dB.sel(time='2023-06-15 10:00:00', method='nearest')\nvv4 = s1_cube.VV_dB.sel(time='2023-06-27 10:00:00', method='nearest')\nvv5 = s1_cube.VV_dB.sel(time='2023-07-09 10:00:00', method='nearest')\nvv6 = s1_cube.VV_dB.sel(time='2023-07-10 10:00:00', method='nearest')\n\n# Plot \nf = plt.figure(figsize=[16,11])\nax1 = f.add_subplot(2,3, 1)\nax2 = f.add_subplot(2,3, 2)\nax3 = f.add_subplot(2,3, 3)\nax4 = f.add_subplot(2,3, 4)\nax5 = f.add_subplot(2,3, 5)\nax6 = f.add_subplot(2,3, 6)\n\naxlist=[ax1,ax2,ax3,ax4,ax5,ax6]\n\nt = vv1.plot.imshow(ax=ax1, vmin=-40, vmax=0, cmap='winter', add_colorbar=False)\nvv2.plot.imshow(ax=ax2, vmin=-40, vmax=0, cmap='winter', add_colorbar=False)\nvv3.plot.imshow(ax=ax3, vmin=-40, vmax=0, cmap='winter', add_colorbar=False)\nvv4.plot.imshow(ax=ax4, vmin=-40, vmax=0, cmap='winter', add_colorbar=False)\nvv5.plot.imshow(ax=ax5, vmin=-40, vmax=0, cmap='winter', add_colorbar=False)\nvv6.plot.imshow(ax=ax6, vmin=-40, vmax=0, cmap='winter', add_colorbar=False)\n\ncbar_ax = f.add_axes([1, 0.15, 0.05, 0.7])\nf.colorbar(t, cax=cbar_ax, label=\"VV dB\")\n\nplt.show()","visibility":"show","key":"kIQBCs3KCh"},{"type":"output","id":"-4KuIi7QOWfYRDeowLt1D","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"62875b2a4a6b3f4ca44b6bc5ce31a391","path":"/eodashboard-notebooks/build/62875b2a4a6b3f4ca44b6bc5ce31a391.png"},"text/plain":{"content":"<Figure size 1600x1100 with 7 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"i9CK5qk677"}],"visibility":"show","key":"iC3DzSOStr"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.10006,"end_time":"2023-03-22T13:56:48.779497","exception":false,"start_time":"2023-03-22T13:56:48.679437","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Depending on the local conditions (e.g. terrain orientation, slope) and weather conditions, optical or radar imagery may be more useful. In this case both types of observations seem to provide a good view of the water surface area extent.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JPs0hhsGJs"}],"key":"R7CRJeyAdY"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Next we will generate a flood mask using a threshold.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"QA1uXqsOFv"}],"key":"vcubkSvjv9"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"for SAR images, generally, as a good rule of thumb, in the VV band, values below -20 dB are usually surface water. We will try this value first, but we will also look to visualise how the flood mask changes if we adjust the threshold value.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"Uwbz38chqF"}],"key":"MQO2HfUgE8"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"observing the NDWI range of values, we can chose values above 0.25 to correspond to the water class.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"kMm29wzvM0"}],"key":"u28U6lEA8B"}],"key":"NxGkdvpjrr"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"First, let’s generate the new variable using the ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"l8rsr12fb6"},{"type":"inlineCode","value":".where","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ZBKGBJ1vBf"},{"type":"text","value":" function in xarray.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"b5NTWqfAav"}],"key":"KPm52onAXm"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"At first glance, the below cell may not make much sense. It may read that the step 1 function as assigning a value of 1 to pixels in VV_dB that are equal or more than -20. However, what is actually happening is that the ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"XofmFThnaB"},{"type":"inlineCode","value":".where","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"VbwfdDfSRG"},{"type":"text","value":" function preserves all the pixel values in the variable that are below -20 and assigns everything else a value of 1. More can be found in the xarray documentation ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"nniJD05Hbv"},{"type":"link","url":"http://xarray.pydata.org/en/stable/generated/xarray.DataArray.where.html","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"http://​xarray​.pydata​.org​/en​/stable​/generated​/xarray​.DataArray​.where​.html","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"jIuAtEoxkS"}],"urlSource":"http://xarray.pydata.org/en/stable/generated/xarray.DataArray.where.html","key":"S9zryKqtUT"}],"key":"kLGd3jK6RT"}],"visibility":"show","key":"GMuyiQqzTL"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":0.115588,"end_time":"2023-03-22T13:56:48.973037","exception":false,"start_time":"2023-03-22T13:56:48.857449","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# mask the Sentinel-1 data\n\n# Assign all pixels equal or smaller than -20 a value of 1 and preserve the values of all other pixels \nstep1 = s1_cube.VV_dB.where(s1_cube.VV_dB > -20, 1)\n\n# Assign all other pixels a value of 0. \nwater = step1.where(step1 == 1, 0)\n\nwater.attrs['long_name'] ='water'\nwater.attrs['units'] ='nounits'\n\ns1_cube['water'] = water","visibility":"show","key":"oHEbCdUnvL"},{"type":"output","id":"u1K29Dxol3bXWwoQjhCVe","data":[],"visibility":"show","key":"N4L7nl3Wre"}],"visibility":"show","key":"nw887W0e8M"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.075002,"end_time":"2023-03-22T13:56:49.125841","exception":false,"start_time":"2023-03-22T13:56:49.050839","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Next let’s see what happens to the mask extent if we change the threshold to -15 dB and -25dB:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BvPBPygnSI"}],"key":"NKwP9gBwPY"}],"visibility":"show","key":"PGkTP6d9em"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":0.149665,"end_time":"2023-03-22T13:56:49.346363","exception":false,"start_time":"2023-03-22T13:56:49.196698","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Sentinel-1\nwater_threshold1_step1 = s1_cube.VV_dB.where(s1_cube.VV_dB > -15, 1)\nwater_threshold2_step1 = s1_cube.VV_dB.where(s1_cube.VV_dB > -20, 1)\nwater_threshold3_step1 = s1_cube.VV_dB.where(s1_cube.VV_dB > -25, 1)\n\nwater_threshold1_step2 = water_threshold1_step1.where(water_threshold1_step1 == 1, 0)\nwater_threshold2_step2 = water_threshold2_step1.where(water_threshold2_step1 == 1, 0)\nwater_threshold3_step2 = water_threshold3_step1.where(water_threshold3_step1 == 1, 0)\n\nwater_threshold1 = water_threshold1_step2.sel(time='2023-06-15 10:00:00', method='nearest')\nwater_threshold2 = water_threshold2_step2.sel(time='2023-06-15 10:00:00', method='nearest')\nwater_threshold3 = water_threshold3_step2.sel(time='2023-06-15 10:00:00', method='nearest')","visibility":"show","key":"P0x351d0ub"},{"type":"output","id":"d8Xo1wZKWBsHdXp76-apG","data":[],"visibility":"show","key":"pvf5LDQeyY"}],"visibility":"show","key":"gMPWZRukbE"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.0819,"end_time":"2023-03-22T13:56:49.513732","exception":false,"start_time":"2023-03-22T13:56:49.431832","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Next we will plot the new thresholds we want to test:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ibDHdpohkP"}],"key":"sxEYxXj4uw"}],"visibility":"show","key":"QTWoLXWLRD"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":1.651152,"end_time":"2023-03-22T13:56:51.257434","exception":false,"start_time":"2023-03-22T13:56:49.606282","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Plot \nf = plt.figure(figsize=[20,12])\nax1 = f.add_subplot(2,3, 1)\nax2 = f.add_subplot(2,3, 2)\nax3 = f.add_subplot(2,3, 3)\n\nwater_threshold1.plot.imshow(ax=ax1, vmin=0, vmax=1, cmap='Blues', add_colorbar=False)\nwater_threshold2.plot.imshow(ax=ax2, vmin=0, vmax=1, cmap='Blues', add_colorbar=False)\nwater_threshold3.plot.imshow(ax=ax3, vmin=0, vmax=1, cmap='Blues', add_colorbar=False)\n\nplt.show()","visibility":"show","key":"RVp7nJDlpg"},{"type":"output","id":"D5o1QJJIeHq1jbi5nZ5N_","data":[{"name":"stderr","output_type":"stream","text":"/home/conda/users/52c397debe78d7686aa36bd394f6f113e95009637029c5b71995fe48a567dcd4-20230418-061740-771350-145-edc-2023.03-02/lib/python3.9/site-packages/dask/core.py:119: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"eab410d2bfcf4a0487be86e4bb7d64d8","path":"/eodashboard-notebooks/build/eab410d2bfcf4a0487be86e4bb7d64d8.png"},"text/plain":{"content":"<Figure size 2000x1200 with 3 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"PmYuCeb28L"}],"visibility":"show","key":"YKXWdhkOHz"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":0.115588,"end_time":"2023-03-22T13:56:48.973037","exception":false,"start_time":"2023-03-22T13:56:48.857449","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# mask the Sentinel-2 data\n\n# Assign all pixels equal or larger than 0.25 a value of 1 and preserve the values of pixels \nstep11 = ndwi1.where(ndwi1 < 0.25, 1)\n\n# Assign all other pixels a value of 0. \nwater1 = step1.where(step1 == 1, 0)\n\nwater1.attrs['long_name'] ='water'\nwater1.attrs['units'] ='nounits'\n\ns2_cube['water'] = water1","visibility":"show","key":"np2w0RdYGu"},{"type":"output","id":"HM3BfkZxUz9SOzXlDKerd","data":[],"visibility":"show","key":"NZDr2DZjjR"}],"visibility":"show","key":"gABK9fhdk6"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":0.149665,"end_time":"2023-03-22T13:56:49.346363","exception":false,"start_time":"2023-03-22T13:56:49.196698","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Sentinel-2\nwater_threshold1_step11 = ndwi1.where(ndwi1 < 0.15, 1)\nwater_threshold2_step11 = ndwi1.where(ndwi1 < 0.25, 1)\nwater_threshold3_step11 = ndwi1.where(ndwi1 < 0.30, 1)\n\nwater_threshold1_step21 = water_threshold1_step11.where(water_threshold1_step11 == 1, 0)\nwater_threshold2_step21 = water_threshold2_step11.where(water_threshold2_step11 == 1, 0)\nwater_threshold3_step21 = water_threshold3_step11.where(water_threshold3_step11 == 1, 0)\n\nwater_threshold11 = water_threshold1_step21\nwater_threshold21 = water_threshold2_step21\nwater_threshold31 = water_threshold3_step21","visibility":"show","key":"C0leZm4Qi0"},{"type":"output","id":"QczFyk52gMAlCwT4bXR04","data":[],"visibility":"show","key":"gKRLlYuf3r"}],"visibility":"show","key":"ffvsaPGdtM"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":1.651152,"end_time":"2023-03-22T13:56:51.257434","exception":false,"start_time":"2023-03-22T13:56:49.606282","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Plot \nf = plt.figure(figsize=[20,12])\nax1 = f.add_subplot(2,3, 1)\nax2 = f.add_subplot(2,3, 2)\nax3 = f.add_subplot(2,3, 3)\n\nwater_threshold11.plot.imshow(ax=ax1, vmin=0, vmax=1, cmap='Blues', add_colorbar=False)\nwater_threshold21.plot.imshow(ax=ax2, vmin=0, vmax=1, cmap='Blues', add_colorbar=False)\nwater_threshold31.plot.imshow(ax=ax3, vmin=0, vmax=1, cmap='Blues', add_colorbar=False)\n\nplt.show()","visibility":"show","key":"pVxbhmY7Vb"},{"type":"output","id":"qzSv0r513yKjiN5o_fVFH","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"b1e1cbcb33de4a107bd3fe9027ef03c9","path":"/eodashboard-notebooks/build/b1e1cbcb33de4a107bd3fe9027ef03c9.png"},"text/plain":{"content":"<Figure size 2000x1200 with 3 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"JqrNQhJ6Ag"}],"visibility":"show","key":"ThJpvn0p6P"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.125311,"end_time":"2023-03-22T13:56:51.505250","exception":false,"start_time":"2023-03-22T13:56:51.379939","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Observe the differences in the water mask due to the threshold.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nlkWJHlH5C"}],"key":"UJMDLOaXXu"}],"visibility":"show","key":"XXOg27gjfJ"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.089827,"end_time":"2023-03-22T13:59:05.432985","exception":false,"start_time":"2023-03-22T13:59:05.343158","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Estimating the surface water area extent","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ug78wL4Zxa"}],"identifier":"estimating-the-surface-water-area-extent","label":"Estimating the surface water area extent","html_id":"estimating-the-surface-water-area-extent","implicit":true,"key":"OU5z5w6fWo"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Let’s estimate the area covered by water during the time period we are examining.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"akz5LAlXCt"}],"key":"x6vreOXUVs"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"We can also estimate which is the area that is most covered by water by dividing the sum of the water pixels by the number of timesteps in the data cube (the count).","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"OQf4kYti16"}],"key":"e9miDl23HM"}],"visibility":"show","key":"Az6Xo70jwJ"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":0.148218,"end_time":"2023-03-22T13:59:05.666548","exception":false,"start_time":"2023-03-22T13:59:05.518330","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# previously we only kept 1 time step when we selected ndwi1\n# now we want to keep the full datacube in order to average in time\n\n# Assign all pixels equal or larger than 0.25 a value of 1 and preserve the values of all other pixels \nstep1 = s2_cube.NDWI.where(s2_cube.NDWI < 0.25, 1)\n\n# Assign all other pixels a value of 0. \nwater = step1.where(step1 == 1, 0)\n\nwater.attrs['long_name'] ='water'\nwater.attrs['units'] ='nounits'\n\ns2_cube['water'] = water\n\n\nwater_sum = s2_cube.NDWI.sum(dim=\"time\")\nwater_count = s2_cube.NDWI.count(dim=\"time\")\nwater_average = water_sum / water_count\n\n\nwater_average.attrs['long_name']='water area'\nwater_average.attrs['units']='nounits'\n\nndwi['water_average']= water_average","visibility":"show","key":"DuSI7up2n2"},{"type":"output","id":"7P3YsXhZNGUp2oKkd41Lt","data":[],"visibility":"show","key":"HKe5rGEwof"}],"visibility":"show","key":"d1oiTKVvO2"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.091074,"end_time":"2023-03-22T13:59:05.866773","exception":false,"start_time":"2023-03-22T13:59:05.775699","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now let’s plot the water_average into a plot:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"x6DBVI6Hzy"}],"key":"jIr3TVDA4M"}],"visibility":"show","key":"FjPYyvcJJU"},{"type":"block","kind":"notebook-code","data":{"papermill":{"duration":3.655907,"end_time":"2023-03-22T13:59:09.645795","exception":false,"start_time":"2023-03-22T13:59:05.989888","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"water_average.plot.imshow(cmap='GnBu', vmin=0, vmax=0.5, figsize=(10, 10))\n\nplt.tight_layout()\n\n#expport to png\nplt.savefig('figure.png')\n\nplt.show()","visibility":"show","key":"s2Rvut96cl"},{"type":"output","id":"zdj8M5M_r03adJ2VWtI2Q","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"db96fdbcbad016dc19d903cecc1b3010","path":"/eodashboard-notebooks/build/db96fdbcbad016dc19d903cecc1b3010.png"},"text/plain":{"content":"<Figure size 1000x1000 with 2 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"IRD7g4aHDS"}],"visibility":"show","key":"sKccsvyYR9"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.111844,"end_time":"2023-03-22T13:59:09.880140","exception":false,"start_time":"2023-03-22T13:59:09.768296","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This looks great, we have identified the lake area very clearly here and can also observe how the lake may change in size over time.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nkekFJ9P9w"}],"key":"aYNB8IURSA"}],"visibility":"show","key":"GcWW0EMrRB"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Access environmental variables and other datasets","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KGGhQLBZmj"}],"identifier":"access-environmental-variables-and-other-datasets","label":"Access environmental variables and other datasets","html_id":"access-environmental-variables-and-other-datasets","implicit":true,"key":"RdJ39ZfABq"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"nkIasIglPQ"},{"type":"link","url":"https://nbviewer.hub.eox.at/notebooks/eurodatacube/notebooks/curated/EDC_xcube_generator_service.ipynb","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notebook","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RC6MRLY3xv"}],"urlSource":"https://nbviewer.hub.eox.at/notebooks/eurodatacube/notebooks/curated/EDC_xcube_generator_service.ipynb","key":"ysQikjlgud"},{"type":"text","value":" demonstrates how to:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hqDBeuFPWd"}],"key":"IT14kzMinp"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"request data from selected Copernicus Services,\nrequest data from Copernicus Climate Data Store,\nrequest data from ESA Climate Change Initiative.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"SJvvIjuyR9"}],"key":"kBw7gSAosf"}],"key":"v1hPU4k7p2"}],"key":"bfFUypNpZG"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Evaluation of Fire Impact on Populated Areas on a European Site","url":"/notebooks/fire-impact-analysis","group":"Notebooks"},"next":{"title":"Earth System Science Open Challenge 1: L. Jessel, S. Hezzi, M. Roussel","url":"/notebooks/openchallengenotebook-c1-jessel-hezzi-roussel","group":"Notebooks"}}},"domain":"http://localhost:3000"}